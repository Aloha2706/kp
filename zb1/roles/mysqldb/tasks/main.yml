---
- name: Setup repo for Mysql 8
  yum:
    name: http://repo.mysql.com/mysql80-community-release-el7-11.noarch.rpm
    state: present
    validate_certs: no 

- name: import new key for comunity server 
  shell: rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022
  

- name: Install mysql-community-server 
  yum:
    name: 
      - mysql-community-server 
      - MySQL-python
    state: present
#  tags: now


- name: root | place temporary cnf file
  template:
    src: temp.cnf
    dest: /etc/my.cnf
    mode: '0644'
  #tags: now

- name: root | copy root.cnf
  template:
    src: root.cnf
    dest: /root/.my.cnf
    mode: '0644'

- name: Start Mysql
  service:
    name: mysqld
    state: started
    enabled: yes

- name: root | get temp root password
  shell: >-
    grep 'temporary password' /var/log/mysqld.log |
    awk '{print $NF}' | tail -n 1
  register: temp_root_pw
  tags: chpass

- name: root | set root password
  shell: >-
    mysqladmin -u root
    --password="{{ temp_root_pw.stdout }}"
    password "{{ mysql_temp_password }}"
  ignore_errors: True
  #no_log: true
  #tags: now

# это ценный пример дебаггинга не удалять
#- name: Debug registered var
#  debug: var=temp_root_pw.stdout_lines
#  tags: chpass

# это ценный пример дебаггинга не удалять
- name: Set validate_password_policy
  community.mysql.mysql_variables:
    variable: validate_password.policy
    value: 0
    config_file : ""
    login_user: root
    login_password: "{{ mysql_temp_password }}"
  ignore_errors: True
  #no_log: false
  #debugger: always
  tags: chpass

- name: root | set root password
  shell: >-
    mysqladmin -u root
    --password="{{ mysql_temp_password }}"
    password "{{ mysql_root_password }}"
  ignore_errors: True




#- name: Create a directory if it does not exist
#  ansible.builtin.file:
#    path: /etc/mysql/
#    state: directory
#    mode: '0755'

#- name: root | copy root.cnf
#  template:
#    src: root.cnf
#    dest: /etc/mysql/root.cnf
#    mode: '0600'
#    owner: root
#    group: root



  #no_log: true

#- name: root | delete anonymous connections
#  mysql_user:
#    name: ""
#    host_all: true
#    state: absent
#    login_user: root
#    login_password: "{{ mysql_root_password }}"
#  no_log: true


#- name: root | ensure test database is removed
#  mysql_db:
#    name: test
#    login_user: root
#    state: absent
#    login_password: "{{ mysql_root_password }}"

#- name: root | stop mysql again
#  systemd:
#    name: mysqld
#    state: stopped
#    enabled: true

#- name: root | remove mysqld log file
#  file:
#    path: /var/log/mysqld.log
#    state: absent

#- name: root | start mysql again
#  systemd:
#    name: mysqld
##    state: started
#    enabled: true



#- name: restart mysql 
#  systemd:
#    name: mysqld
#    state: restarted

